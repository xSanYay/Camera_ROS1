#!/usr/bin/env python3
import rospy
import cv2
import numpy as np
import math
from std_msgs.msg import String 
from sensor_msgs.msg import Image 
from geometry_msgs.msg import Twist


from cv_bridge import CvBridge, CvBridgeError
import cv2.aruco as aruco


def isRotationMatrix(R):

    Rt=np.transpose(R)

    shouldBeIdentity = np.dot (Rt, R)

    I= np.identity(3, dtype=R.dtype)

    n = np.linalg.norm(I - shouldBeIdentity)

    return n< 1e-6
    
def rotationMatrixToEulerAngles (R): 
    assert (isRotationMatrix(R))

    sy = math.sqrt(R[0, 0] *R[0, 0]+R[1, 0] *R[1, 0])

    singular = sy < 1e-6

    if not singular:

        x = math.atan2(R[2, 1], R[2,2])

        y = math.atan2(-R[2, 0], sy)

        z = math.atan2 (R[1, 0], R[0, 0])

    else:

        x = math.atan2(-R[1, 2], R[1, 1])

        y = math.atan2(-R[2, 0], sy)

        z=0

    return np.array([x, y, z])
    
marker_size = 10

calib_data_path = r"home/sanjay_ubuntu/aruco/src/arucosim/data/MultiMatrix.npz"

calib_data = np.load(calib_data_path)
print(calib_data.files)

camera_matrix = calib_data["camMatrix"]
camera_distortion = calib_data["distCoef"]

aruco_dict = aruco.getPredefinedDictionary(aruco.DICT_4X4_100)

cap = cv2.VideoCapture (0)

camera_width=640

camera_height = 480

camera_frame_rate=40

cap.set(2, camera_width)

cap.set(4, camera_height)

cap.set(5, camera_frame_rate)

dictionary = cv2.aruco.getPredefinedDictionary(cv2.aruco.DICT_4X4_250)
parameters =  cv2.aruco.DetectorParameters()
detector = cv2.aruco.ArucoDetector(dictionary, parameters)



def move ():
	rospy.init_node('this_motor',anonymous=True)
	vel_pub = rospy.Publisher('/turtle/cmd_vel',Twist,queue_size = 10)
	vel_msg = Twist()
	#it is tutle/cmdvel
	
	#this publishes camera frames
	rospy.init_node('video_pub_py', anonymous=True)
	pub = rospy.Publisher('video_frames', Image, queue_size=10)
	
	# Go through the loop 10 times per second
	rate = rospy.Rate(10)
	
	
	cap = cv2.VideoCapture(0)
	
	# ROS to Opencv conversion here
	br = CvBridge()
	
	#this is the llooop for capturing images and arudo detection 
	
	while not rospy.is_shutdown():
		ret, frame = cap.read()
		if ret == True:
			rospy.loginfo('publishing video frame')
			pub.publish(br.cv2_tom_imgmsg(frame))
		
		gray_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY) # Convert to Grayscale

    # Find all the aruco markers in the image 
    
		corners,ids, rejected = detector.detectMarkers(frame)

		if ids is not None:

			aruco.drawDetectedMarkers (frame, corners ) # draw a box around all the detected markers

			#get pose of all single markers
			rvec, tvec, _ = aruco.estimatePoseSingleMarkers(corners, marker_size,camera_matrix,camera_distortion)
			rvec = rvec[0][0]
			tvec = tvec[0][0]

			# aruco.drawAxis(frame, camera_matrix, camera_distortion, rvec, tvec, 100)
			
			rvec_flipped = rvec * -1

			tvec_flipped = tvec * -1

			rotation_matrix, jacobian = cv2.Rodrigues(rvec_flipped)

			realworld_tvec = np.dot(rotation_matrix, tvec_flipped)
			
			
			pitch, roll, yaw = rotationMatrixToEulerAngles(rotation_matrix)
			distance = np.sqrt(realworld_tvec[0]**2 + realworld_tvec[1]**2+ realworld_tvec[2]**2)
			tvec_str = f"x-{realworld_tvec[0]:4.0f} y={realworld_tvec[1]:4.0f} direction={math.degrees(roll):4.0f} "

			
			distance = int(input(tvec_str))
			
			vel_msg.linear.x = speed
			vel_msg.linear.y = 0
			vel_msg.linear.z= 0 


			if distance > 40 :
				print("50")      
				speed = 50
				vel_pub.publish(vel_msg)

			# elif math.degrees(roll)<-6:
			# 	print("Turn right")
			# elif math.degrees(roll)>6:
			# 	print("Turn left")
			# else:
			# 	print("move straight")







			cv2.putText(frame,f"id: {ids[0]} Dist: {round(distance, 2)}",(20,100),cv2.FONT_HERSHEY_PLAIN,1.3,(0, 0, 255),2,cv2.LINE_AA)
			cv2.putText(frame, tvec_str, (20, 460), cv2.FONT_HERSHEY_PLAIN, 2, (0, 0, 255), 2, cv2.LINE_AA)
			
		cv2.imshow("frame", frame)

		key= cv2.waitKey(1) & 0xFF

		if key==ord('q'): break
	
	
	cap.release() 
	cv2.destroyAllWindows()
	vel_msg.linear.x = 0
	vel_pub.publish(vel_msg)


if __name__ == '__main__' :
	try:
		move()
	
	except rospy.ROSInterruptException: pass



		
	
	
	
	
	



		
	# while not rospy.is_shutdown():
	# 	t0 = rospy.Time.now().to_sec()
	# 	current_distance = 0
	
	# 	while (current_distance<distance):
			
	# 		vel_pub.publish(vel_msg)
			
	# 		t1 = rospy.Time.now().to_sec()
			
	# 		#cause distance = velocity * delta time
			
	# 		current_distance= speed*(t1-t0)
							

		

			 
